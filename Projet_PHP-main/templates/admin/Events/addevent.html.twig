{% extends "baseAdmin.html.twig" %}

{% block body %}

<body>
    <main id="main" class="main">
    <style>
    body {
        background: linear-gradient(135deg, #f3f4f7, #8fa9b7);
        font-family: 'Arial', sans-serif;
        margin: 0;
        min-height: 100vh;
    }
    .container {
        background: #ffffff;
        border-radius: 15px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        padding: 30px;
        max-width: 600px;
        margin: 50px auto;
    }
    h1 {
        text-align: center;
        color: #2c3e50;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-weight: bold;
        margin-bottom: 30px;
    }
    form label {
        font-weight: bold;
        color: #34495e;
        margin-top: 15px;
        display: block;
    }
    form input, form textarea, form select {
        width: 100%;
        padding: 12px;
        margin-top: 5px;
        margin-bottom: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        color: #2c3e50;
        box-sizing: border-box;
    }
    form input:focus, form textarea:focus, form select:focus {
        border-color: #27ae60;
        outline: none;
        box-shadow: 0 0 5px rgba(39, 174, 96, 0.5);
    }
    .btn-submit {
        background-color: #27ae60;
        border: none;
        color: white;
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        width: 100%;
    }
    .btn-submit:hover {
        background-color: #229954;
    }
    .btn-back {
        display: inline-block;
        margin-top: 20px;
        text-align: center;
        font-size: 14px;
        color: #34495e;
        padding: 10px 20px;
        border: 1px solid #34495e;
        border-radius: 5px;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    .btn-back:hover {
        background-color: #34495e;
        color: white;
    }
    .error {
        color: red;
        font-size: 14px;
        margin-top: -15px;
        margin-bottom: 15px;
        display: none;
    }
</style>

<div class="container">
    <h1>Créer un Événement</h1>

    <form id="createEventForm" method="post" enctype="multipart/form-data">
        <label for="nomEvent">Nom de l'Événement :</label>
        <input type="text" name="nomEvent" id="nomEvent" required>
        <div class="error" id="errorNomEvent"></div>

        <label for="debutEvent">Date de Début :</label>
        <input type="date" name="debutEvent" id="debutEvent" required>
        <div class="error" id="errorDebutEvent"></div>

        <label for="finEvent">Date de Fin :</label>
        <input type="date" name="finEvent" id="finEvent" required>
        <div class="error" id="errorFinEvent"></div>

        <label for="typeEvent">Type d'Événement :</label>
        <select name="typeEvent" id="typeEvent" required>
            <option value="IT">IT</option>
            <option value="Charité">Charité</option>
            <option value="Sportif">Sportif</option>
            <option value="Campagne">Campagne</option>
        </select>
        <div class="error" id="errorTypeEvent"></div>

        <label for="idClub">ID Club :</label>
        <input type="number" name="idClub" id="idClub" required>
        <div class="error" id="errorIdClub"></div>

        <label for="capacite">Capacité :</label>
        <input type="number" name="capacite" id="capacite" required>
        <div class="error" id="errorCapacite"></div>

        <label for="descriptionEvent">Description :</label>
        <textarea name="descriptionEvent" id="descriptionEvent" required></textarea>

        <label for="membreInscrits">Membres Inscrits :</label>
        <textarea name="membreInscrits" id="membreInscrits" placeholder='Exemple : ["Membre1", "Membre2"]'></textarea>
        <div class="error" id="errorMembreInscrits"></div>

        <label for="ressources">Ressources :</label>
        <textarea name="ressources" id="ressources" placeholder='Exemple : ["Ressource1", "Ressource2"]'></textarea>
        <div class="error" id="errorRessources"></div>

        <label for="photo">Photo de l'Événement :</label>
        <input type="file" name="photo" id="photo" accept="image/*" required>

        <form method="post" action="{{ path('admin_events_index') }}">
    <button type="submit" class="btn-submit">Créer l'Événement</button>
</form>

    </form>

    <a href="{{ path('admin_events_index') }}" class="btn-back">Retour à la liste des événements</a>
</div>

<script>
    const form = document.getElementById('createEventForm');
    const today = new Date().toISOString().split('T')[0];

    form.addEventListener('submit', function(event) {
        let valid = true;

        // Nom de l'événement
        const nomEvent = document.getElementById('nomEvent').value.trim();
        const errorNomEvent = document.getElementById('errorNomEvent');
        if (!nomEvent) {
            errorNomEvent.textContent = "Le nom de l'événement est obligatoire.";
            errorNomEvent.style.display = 'block';
            valid = false;
        } else {
            errorNomEvent.style.display = 'none';
        }

        // Date de début
        const debutEvent = document.getElementById('debutEvent').value;
        const errorDebutEvent = document.getElementById('errorDebutEvent');
        if (debutEvent < today) {
            errorDebutEvent.textContent = "La date de début doit être aujourd'hui ou une date future.";
            errorDebutEvent.style.display = 'block';
            valid = false;
        } else {
            errorDebutEvent.style.display = 'none';
        }

        // Date de fin
        const finEvent = document.getElementById('finEvent').value;
        const errorFinEvent = document.getElementById('errorFinEvent');
        if (finEvent && finEvent < debutEvent) {
            errorFinEvent.textContent = "La date de fin doit être après la date de début.";
            errorFinEvent.style.display = 'block';
            valid = false;
        } else {
            errorFinEvent.style.display = 'none';
        }

        // ID du Club
        const idClub = parseInt(document.getElementById('idClub').value, 10);
        const errorIdClub = document.getElementById('errorIdClub');
        if (idClub <= 0) {
            errorIdClub.textContent = "L'ID du club doit être supérieur à 0.";
            errorIdClub.style.display = 'block';
            valid = false;
        } else {
            errorIdClub.style.display = 'none';
        }

        // Capacité
        const capacite = parseInt(document.getElementById('capacite').value, 10);
        const errorCapacite = document.getElementById('errorCapacite');
        if (capacite <= 0) {
            errorCapacite.textContent = "La capacité doit être supérieure à 0.";
            errorCapacite.style.display = 'block';
            valid = false;
        } else {
            errorCapacite.style.display = 'none';
        }

        // Validation du format JSON des membres inscrits
        const membreInscrits = document.getElementById('membreInscrits').value;
        const errorMembreInscrits = document.getElementById('errorMembreInscrits');
        if (membreInscrits.trim() !== "" && !isValidJsonArray(membreInscrits)) {
            errorMembreInscrits.textContent = 'Le champ Membres Inscrits doit respecter le format ["Membre1", "Membre2"].';
            errorMembreInscrits.style.display = 'block';
            valid = false;
        } else {
            errorMembreInscrits.style.display = 'none';
        }

        // Validation du format JSON des ressources
        const ressources = document.getElementById('ressources').value;
        const errorRessources = document.getElementById('errorRessources');
        if (ressources.trim() !== "" && !isValidJsonArray(ressources)) {
            errorRessources.textContent = 'Le champ Ressources doit respecter le format ["Ressource1", "Ressource2"].';
            errorRessources.style.display = 'block';
            valid = false;
        } else {
            errorRessources.style.display = 'none';
        }

        if (!valid) {
            event.preventDefault();  // Si le formulaire est invalide, on empêche la soumission
        }
    });

    function isValidJsonArray(value) {
        try {
            const parsed = JSON.parse(value);
            return Array.isArray(parsed) && parsed.every(item => typeof item === 'string');
        } catch (e) {
            return false;
        }
    }
</script>

</main>
</body>
{% endblock %}